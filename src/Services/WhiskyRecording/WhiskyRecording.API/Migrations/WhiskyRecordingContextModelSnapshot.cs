// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhiskyArchive.Services.WhiskyRecording.Infrastructure;

namespace WhiskyArchive.Services.WhiskyRecording.API.Migrations
{
    [DbContext(typeof(WhiskyRecordingContext))]
    partial class WhiskyRecordingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:whiskyrecording.distilleryseq", "'distilleryseq', 'whiskyrecording', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:whiskyrecording.whiskyimageseq", "'whiskyimageseq', 'whiskyrecording', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:whiskyrecording.whiskypriceseq", "'whiskypriceseq', 'whiskyrecording', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:whiskyrecording.whiskyseq", "'whiskyseq', 'whiskyrecording', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Distilleries.Distillery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "distilleryseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "whiskyrecording")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("DistilleryId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Established")
                        .IsRequired();

                    b.Property<string>("Introdution")
                        .IsRequired();

                    b.Property<string>("SmwsCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DistilleryId")
                        .IsUnique();

                    b.ToTable("distilleries","whiskyrecording");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("currency","whiskyrecording");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.PriceReference", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("pricereference","whiskyrecording");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Whisky", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "whiskyseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "whiskyrecording")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Bottler")
                        .IsRequired();

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("DistilleryId")
                        .IsRequired();

                    b.Property<string>("Notes")
                        .IsRequired();

                    b.Property<float>("WhiskyBaseRating");

                    b.Property<string>("WhiskyId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("WhiskyId")
                        .IsUnique();

                    b.ToTable("whiskys","whiskyrecording");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "whiskyimageseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "whiskyrecording")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("WhiskyId")
                        .IsRequired();

                    b.Property<int?>("WhiskyId1");

                    b.Property<int>("WhiskyImageNumber");

                    b.HasKey("Id");

                    b.HasIndex("WhiskyId1");

                    b.ToTable("whiskyimages","whiskyrecording");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "whiskypriceseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "whiskyrecording")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(20,2)");

                    b.Property<DateTime>("PriceDate");

                    b.Property<int>("PriceReferenceId");

                    b.Property<string>("Seller")
                        .IsRequired();

                    b.Property<string>("WhiskyId")
                        .IsRequired();

                    b.Property<int?>("WhiskyId1");

                    b.Property<int>("WhiskyPriceNumber");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PriceReferenceId");

                    b.HasIndex("WhiskyId1");

                    b.ToTable("whiskyprices","whiskyrecording");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("ClientRequests");
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Distilleries.Distillery", b =>
                {
                    b.OwnsOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Distilleries.DistilleryName", "DistilleryName", b1 =>
                        {
                            b1.Property<int?>("DistilleryId");

                            b1.Property<string>("ChineseSimplified");

                            b1.Property<string>("ChineseTraditional");

                            b1.Property<string>("English");

                            b1.ToTable("distilleries","whiskyrecording");

                            b1.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Distilleries.Distillery")
                                .WithOne("DistilleryName")
                                .HasForeignKey("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Distilleries.DistilleryName", "DistilleryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Whisky", b =>
                {
                    b.OwnsOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyDetail", "WhiskyDetail", b1 =>
                        {
                            b1.Property<int?>("WhiskyId");

                            b1.Property<string>("Bottled");

                            b1.Property<string>("CaskNumber");

                            b1.Property<string>("CaskType");

                            b1.Property<string>("Market");

                            b1.Property<int?>("NumOfBottles");

                            b1.Property<int>("Size");

                            b1.Property<int?>("StatedAge");

                            b1.Property<float>("Strength");

                            b1.Property<string>("Vintage");

                            b1.ToTable("whiskys","whiskyrecording");

                            b1.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Whisky")
                                .WithOne("WhiskyDetail")
                                .HasForeignKey("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyDetail", "WhiskyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyName", "WhiskyName", b1 =>
                        {
                            b1.Property<int?>("WhiskyId");

                            b1.Property<string>("Chinese");

                            b1.Property<string>("English");

                            b1.ToTable("whiskys","whiskyrecording");

                            b1.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Whisky")
                                .WithOne("WhiskyName")
                                .HasForeignKey("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyName", "WhiskyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyImage", b =>
                {
                    b.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Whisky")
                        .WithMany("WhiskyImages")
                        .HasForeignKey("WhiskyId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.WhiskyPrice", b =>
                {
                    b.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.PriceReference", "PriceReference")
                        .WithMany()
                        .HasForeignKey("PriceReferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WhiskyArchive.Services.WhiskyRecording.Domain.Model.Whiskys.Whisky")
                        .WithMany("WhiskyPrices")
                        .HasForeignKey("WhiskyId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
